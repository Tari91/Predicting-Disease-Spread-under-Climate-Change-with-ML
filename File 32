import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Generate synthetic data
np.random.seed(42)

years = np.arange(2000, 2026)
n_samples = len(years)

# Climate features
temperature = 20 + 0.05 * (years - 2000) + np.random.normal(0, 0.5, n_samples)
humidity = 60 + 0.1 * (years - 2000) + np.random.normal(0, 1.5, n_samples)
rainfall = 1000 + 10 * (years - 2000) + np.random.normal(0, 50, n_samples)

# Other features
population_density = 100 + 2 * (years - 2000) + np.random.normal(0, 5, n_samples)

# Disease incidence (dependent on all above)
disease_cases = (
    100 + 
    3 * temperature +
    0.5 * humidity +
    0.02 * rainfall +
    0.8 * population_density +
    np.random.normal(0, 20, n_samples)
)

# Combine into a DataFrame
data = pd.DataFrame({
    'Year': years,
    'Temperature': temperature,
    'Humidity': humidity,
    'Rainfall': rainfall,
    'PopulationDensity': population_density,
    'DiseaseCases': disease_cases
})

# Step 2: Visualize
sns.pairplot(data, diag_kind="kde")
plt.suptitle("Synthetic Climate-Disease Data", y=1.02)
plt.show()

# Step 3: Train-test split
X = data[['Year', 'Temperature', 'Humidity', 'Rainfall', 'PopulationDensity']]
y = data['DiseaseCases']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 5: Evaluate
y_pred = model.predict(X_test)
print("R2 Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

# Plot predictions
plt.scatter(y_test, y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual vs Predicted Disease Cases")
plt.grid(True)
plt.show()

# Step 6: Predict future disease spread (2026â€“2030)
future_years = np.arange(2026, 2031)
future_data = pd.DataFrame({
    'Year': future_years,
    'Temperature': 20 + 0.05 * (future_years - 2000) + np.random.normal(0, 0.5, len(future_years)),
    'Humidity': 60 + 0.1 * (future_years - 2000) + np.random.normal(0, 1.5, len(future_years)),
    'Rainfall': 1000 + 10 * (future_years - 2000) + np.random.normal(0, 50, len(future_years)),
    'PopulationDensity': 100 + 2 * (future_years - 2000) + np.random.normal(0, 5, len(future_years)),
})

future_predictions = model.predict(future_data)

# Show future predictions
future_data['PredictedDiseaseCases'] = future_predictions
print(future_data)

# Plot future predictions
plt.plot(future_years, future_predictions, marker='o', linestyle='-', color='green')
plt.xlabel("Year")
plt.ylabel("Predicted Disease Cases")
plt.title("Predicted Disease Spread (2026-2030)")
plt.grid(True)
plt.show()
