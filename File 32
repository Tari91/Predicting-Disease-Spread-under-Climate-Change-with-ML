import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Set random seed for reproducibility
np.random.seed(42)

# --- Generate Synthetic Climate and Disease Data ---
n_samples = 1000

# Climate and environmental features
temperature = np.random.normal(25, 5, n_samples)       # °C
humidity = np.random.uniform(30, 90, n_samples)        # %
rainfall = np.random.gamma(2, 20, n_samples)           # mm/month
co2 = np.random.normal(400, 20, n_samples)             # ppm
population_density = np.random.exponential(300, n_samples)  # people/km²
vector_index = np.random.uniform(0, 1, n_samples)      # mosquito activity score

# Disease spread (target variable): synthetic formula
disease_cases = (
    0.3 * temperature +
    0.4 * humidity +
    0.2 * rainfall +
    0.1 * co2 +
    0.5 * population_density +
    1.5 * vector_index * 100 +
    np.random.normal(0, 30, n_samples)  # noise
)

# Create DataFrame
data = pd.DataFrame({
    'temperature': temperature,
    'humidity': humidity,
    'rainfall': rainfall,
    'co2': co2,
    'population_density': population_density,
    'vector_index': vector_index,
    'disease_cases': disease_cases
})

# --- Train-Test Split ---
X = data.drop(columns='disease_cases')
y = data['disease_cases']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# --- Train ML Model ---
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# --- Evaluate ---
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R² Score: {r2:.2f}")

# --- Feature Importance ---
importances = model.feature_importances_
features = X.columns
feature_importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
feature_importance_df = feature_importance_df.sort_values('Importance', ascending=False)

# Plot
plt.figure(figsize=(8, 5))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df)
plt.title('Feature Importance')
plt.tight_layout()
plt.show()
